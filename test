package dk.itu.pac.controller;

import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.http.MediaType;

@CrossOrigin
@RestController
@RequestMapping(value = "pac/v1", produces = MediaType.APPLICATION_JSON_VALUE)
public class PacController {
	
	private volatile String ip="";

	@RequestMapping(value = "/ip", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public String getIPInfo(HttpServletRequest request) {
		String ipAddress = null;
		try {
			ipAddress = request.getHeader("x-forwarded-for");
			if (ipAddress == null || ipAddress.length() == 0 || "unknown".equalsIgnoreCase(ipAddress)) {
				ipAddress = request.getHeader("Proxy-Client-IP");
			}
			if (ipAddress == null || ipAddress.length() == 0 || "unknown".equalsIgnoreCase(ipAddress)) {
				ipAddress = request.getHeader("WL-Proxy-Client-IP");
			}
			if (ipAddress == null || ipAddress.length() == 0 || "unknown".equalsIgnoreCase(ipAddress)) {
				ipAddress = request.getRemoteAddr();
				if (ipAddress.equals("127.0.0.1")) {
					// 根据网卡取本机配置的IP
					InetAddress inet = null;
					try {
						inet = InetAddress.getLocalHost();
					} catch (UnknownHostException e) {
						e.printStackTrace();
					}
					ipAddress = inet.getHostAddress();
				}
			}
			// 对于通过多个代理的情况，第一个IP为客户端真实IP,多个IP按照','分割
			if (ipAddress != null && ipAddress.length() > 15) { // "***.***.***.***".length()
				// = 15
				if (ipAddress.indexOf(",") > 0) {
					ipAddress = ipAddress.substring(0, ipAddress.indexOf(","));
				}
			}
		} catch (Exception e) {
			ipAddress = "";
		}
		ip=ipAddress;
		return "{\"ip\":\"" + ipAddress + "\"}";
	}

	@RequestMapping(value = "/config", method = RequestMethod.GET)
    public void getConfigInfo(HttpServletResponse response) throws IOException{
		System.out.println("called by ip:"+ip);
		response.setHeader("Content-Type","application/x-ns-proxy-autoconfig");
		response.getWriter().print("function FindProxyForURL(url, host) {"+"return \"PROXY "+ip+":8800; SOCKS "+ip+":8899; DIRECT\";"+"}");
    }
}
